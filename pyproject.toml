# ===================================================================================
# pyproject.toml for the FinTrust Compliance Solution
# Workflow: uv (for venv and package installation)
# Standards: PEP 621 for project metadata and dependencies
# ===================================================================================

[build-system]
# Required section for build tools to understand the project
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"


[project]
# Core project metadata (PEP 621)
name = "fintrust_compliance_solution"
version = "0.1.0"
description = "AI solution for regulatory compliance and risk assessment in loan applications."
authors = [
    { name = "Ali Salaman", email = "alisalaman@gmail.com" },
]
readme = "README.md"
requires-python = ">=3.12,<4.0"
license = { text = "Proprietary" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

# === PROJECT DEPENDENCIES ===
# These are the packages your application needs to run in production.
# `uv pip install .` will install these.
dependencies = [
    "cohere==5.15.0",
    "pydantic==2.11.7",
    "PyMuPDF==1.26.1",
    # Add other runtime dependencies here, e.g., a web framework like FastAPI
    # "fastapi==0.111.0",
    # "uvicorn[standard]==0.29.0",
    "pandas (>=2.3.0,<3.0.0)",
    "ace-tools (>=0.0,<0.1)",
    "pdfplumber (>=0.11.7,<0.12.0)"
]

# === DEVELOPMENT DEPENDENCIES ===
# These are packages only needed for development (linting, formatting, testing).
# `uv pip install .[dev]` will install these.
[project.optional-dependencies]
dev = [
    # Code formatting and linting
    "black==25.1.0",
    "ruff==0.12.1",
    "mypy==1.16.1",
    # Testing
    "pytest==8.4.1",
    "pytest-cov==6.1.0",
    "pytest-xdist>=3.6.1,<4.0.0",  # parallel test execution
    # Security scanning
    "bandit[toml]==1.8.0",
    # "safety==3.2.11",  # Temporarily disabled due to pydantic version conflict
    # Pre-commit hooks
    "pre-commit==4.2.0",
]

# ===================================================================================
# Scripts
# ===================================================================================
[project.scripts]
lint = "scripts:lint"
format = "scripts:format_code"
test = "scripts:run_tests"
security = "scripts:check_security"
check-all = "scripts:check_all"
generate-all = "scripts:generate_all"

# ===================================================================================
# Tool Configurations
# ===================================================================================

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["F", "E", "W", "I", "N", "UP", "B"] # F=pyflakes, E/W=pycodestyle, I=isort, etc.
ignore = ["E501"] # line-too-long is handled by black

[tool.ruff.lint.isort]
force-wrap-aliases = true
combine-as-imports = true

[tool.black]
line-length = 88
target-version = ['py311']

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]